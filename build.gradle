import jdk.internal.net.http.HttpConnection

plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
}

version = "0.1"
group = "com.mruhwedel"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("com.mruhwedel.*")
    }
}

ext {
    VERSION_LOMBOK = '1.18.16'
    VERSION_GROOVY = '3.0.7'
}

dependencies {
    // micronaut dependencies
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")

    // our dependencies
    annotationProcessor "org.projectlombok:lombok:$VERSION_LOMBOK"
    compile("org.influxdb:influxdb-java:2.21") {
        because 'client for the influxDb'
    }
    compileOnly("org.projectlombok:lombok:$VERSION_LOMBOK") {
        because 'Syntactical sugar. See https://projectlombok.org/'
    }

    testImplementation "org.codehaus.groovy:groovy:$VERSION_GROOVY"
}


application {
    mainClass.set("com.mruhwedel.application.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

test {
    dependsOn 'influxDbTestStart', 'influxDbTestIsUp'
    finalizedBy 'influxDbTestStop'
}

tasks {
}

// dev setup
task influxDbDevStart(type: Exec) {
    commandLine getDbStartCommand('dev', 8086)
}

task influxDbDevStop(type: Exec) {
    commandLine getDbStopCommand('dev')
    ignoreExitValue = true
}
// test setup
task influxDbTestStart(type: Exec) {
    doFirst {
        exec {
            commandLine getDbStopCommand('test')
            ignoreExitValue = true
        }
    }
    commandLine getDbStartCommand('test', 9086)
}
task influxDbTestIsUp() {
    mustRunAfter('influxDbTestStart')
    doFirst {
        boolean dbIsStarting = true
        while (dbIsStarting) {
            try {
                new URL("http://localhost:9086/status").text
                dbIsStarting = false
            } catch (ignored) {
            }
        }
    }
}
task influxDbTestStop(type: Exec) {
    commandLine getDbStopCommand('test')
    ignoreExitValue = true
}

static getDbStopCommand(String env) {
    ['docker', 'stop', "influxdb-$env"]
}

static getDbStartCommand(String env, int port) {
    [
            'docker', 'run',
            '--name', "influxdb-$env",
            '-d',
            '--rm',
            '-e', 'INFLUXDB_DB=sensors', // will bootstrap a db
            '-e', 'INFLUXDB_HTTP_FLUX_ENABLED=true', // needed for the queries we use
            '-p', "$port:8086",
            '-v', "influxdb-$env:/var/lib/influxdb",
            'influxdb:1.8-alpine'
    ]
}

